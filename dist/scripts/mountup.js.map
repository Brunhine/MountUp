{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/chatter.js","webpack:///./src/scripts/macros.js","webpack:///./src/scripts/mountHud.js","webpack:///./src/scripts/mountManager.js","webpack:///./src/scripts/mountup.js","webpack:///./src/scripts/settings.js","webpack:///./src/scripts/settingsForm.js","webpack:///./src/scripts/utils.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Chatter","riderId","mountId","getShouldChat","icon","getIconClass","this","sendChatMessage","getMountMessage","getDismountMessage","message","rider","mount","replace","data","ChatMessage","content","riderNameOrId","mountNameOrId","id","doCreateMount","mountName","riderName","dismount","isaRider","doRemoveMount","getFlag","Mount","dropRider","isaMount","Rider","MountHud","app","html","hudToken","canvas","tokens","controlled","find","_id","length","addRemoveRidersButton","addDismountButton","addMountButton","tokenNames","filter","token","map","buildButton","join","click","async","ev","mountUp","button","addSlash","removeAllRiders","tooltip","$","col","getHudColumnClass","getHudTopBottomClass","prepend","append","hasSlash","removeSlash","slash","addClass","remove","MountManager","mountToken","riderToken","isRidersMount","isAncestor","riders","Riders","undefined","includes","push","unsetFlag","setFlag","OrigSize","w","h","mountMessage","grid","scene","newWidth","newHeight","update","width","height","zIndex","loc","getRiderInitialLocation","MountMove","x","y","parent","sortChildren","console","log","flags","mountup","moveRiderToMount","restoreRiderSize","dismountMessage","splice","indexOf","origsize","H","tokenId","placeables","forEach","popRider","callcount","owner","updateData","newLocation","getRiderLock","NoLock","LockLocation","LockBounds","isInsideTokenBounds","Dismount","rotation","mountLocation","offset","getRiderRotate","game","socket","emit","UpdateToken","location","newX","newY","newRot","getRiderX","Center","mountCenter","getCenter","Right","getRiderY","Bottom","childId","ancestorId","child","Hooks","on","registerSettings","user","isGM","window","MountUp","popAllRiders","renderMountHud","doTokenUpdate","handleTokenDelete","modName","mod","iconOptions","hudColumns","hudTopBottom","riderXOptions","riderYOptions","riderLockOptions","Settings","settings","val","set","registerMenu","label","type","restricted","register","scope","config","Number","default","choices","Boolean","defualt","String","SettingsForm","FormApplication","options","super","mergeObject","defaultOptions","title","template","classes","closeOnSubmit","icons","getSelectList","getIcon","hudColumn","getHudColumn","getHudTopBottom","riderLock","riderRotate","riderX","riderY","shouldChat","mountMsg","dismountMsg","e","setIcon","setHudColumn","setHudTopBottom","setRiderLock","setRiderRotate","setRiderX","setRiderY","setShouldChat","setMountMessage","setDismountMessage","activateListeners","array","selected","FlagScope","Flags","socketName","socketAction","Left","Top","firstGM","users","entities","role","active","logMessage","force","warn","ui","notifications","error","info","findTokenById","findTokenByName","tokenName","toLowerCase"],"mappings":"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","file":"mountup.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"modules/mountup/scripts/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/scripts/mountup.js\");\n","import { Settings } from \"./settings.js\";\r\nimport { findTokenById } from \"./utils.js\";\r\n\r\n/**\r\n * Provides functionality for sending chat messages\r\n */\r\nexport class Chatter {\r\n\r\n    /**\r\n     * Attempts to display a chat message notifying about a mount action\r\n     * @param {String} riderId - The ID of the rider\r\n     * @param {String} mountId - The ID of the mount\r\n     */\r\n    static mountMessage(riderId, mountId) {\r\n        if (Settings.getShouldChat()) {\r\n            let icon = `<span class=\"fa-stack\"><i class=\"fas ${Settings.getIconClass()} fa-stack-1x\"></i></span>&nbsp;`;\r\n            this.sendChatMessage(icon + Settings.getMountMessage(), riderId, mountId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempts to display a chat message notifying about a dismount action\r\n     * @param {String} riderId - The ID of the rider\r\n     * @param {String} mountId - The ID of the mount\r\n     */\r\n    static dismountMessage(riderId, mountId) {\r\n        if (Settings.getShouldChat()) {\r\n            let icon = `<span class=\"fa-stack\" >\r\n                            <i class=\"fas ${Settings.getIconClass()} fa-stack-1x\"></i>\r\n                            <i class=\"fas fa-slash fa-stack-1x\" style=\"color: tomato\"></i>\r\n                        </span>&nbsp;`;\r\n            this.sendChatMessage(icon + Settings.getDismountMessage(), riderId, mountId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a preformatted message to the chat log\r\n     * @param {string} message - The message to be sent\r\n     * @param {string} riderId - The ID of the rider token\r\n     * @param {string} mountId - The ID of the mount token\r\n     */\r\n    static sendChatMessage(message, riderId, mountId) {\r\n        let rider = findTokenById(riderId);\r\n        let mount = findTokenById(mountId);\r\n\r\n        message = message.replace(\"{mount}\", mount.data.name).replace(\"{rider}\", rider.data.name);\r\n\r\n        ChatMessage.create({\r\n            content: message\r\n        });\r\n    }\r\n}","import { MountManager } from \"./mountManager.js\";\r\nimport { error, findTokenById, findTokenByName, Flags, FlagScope } from \"./utils.js\";\r\n\r\n/**\r\n * Macro function to mount a rider token onto a mount token\r\n * @param {string} riderNameOrId - The name or the ID of the rider token\r\n * @param {string} mountNameOrId - The name or the ID of the mount token\r\n */\r\nexport function mount(riderNameOrId, mountNameOrId) {\r\n    let rider = findTokenById(riderNameOrId) || findTokenByName(riderNameOrId);\r\n    let mount = findTokenById(mountNameOrId) || findTokenByName(mountNameOrId);\r\n\r\n    if (rider) {\r\n        if (mount) {\r\n            if (rider.id != mount.id) {\r\n                MountManager.doCreateMount(rider, mount);\r\n            } else { error('You cannot mount a token to itself'); }\r\n        } else { error(`A token could not be found with the name or id : ${mountName}`); }\r\n    } else { error(`A token could not be found with the name or id : ${riderName}`); }\r\n}\r\n\r\n/**\r\n * Macro function to dismount a rider token from its mount\r\n * @param {string} riderNameOrId - The name or the ID of the rider token\r\n */\r\nexport function dismount(riderNameOrId) {\r\n    let rider = findTokenById(riderNameOrId) || findTokenByName(riderNameOrId);\r\n    if (rider) {\r\n        if (MountManager.isaRider(rider.id)) {\r\n            MountManager.doRemoveMount(rider, findTokenById(rider.getFlag(FlagScope, Flags.Mount)));\r\n        } else { error(`Token '${rider.name}' is not a rider`); }\r\n    } else { error(`A token could not be found with the name or id : ${riderNameOrId}`); }\r\n}\r\n\r\n/**\r\n * Macro function to have a mount drop its rider\r\n * @param {string} mountNameOrId - The name or the ID of the mount token\r\n */\r\nexport function dropRider(mountNameOrId) {\r\n    let mount = findTokenById(mountNameOrId) || findTokenByName(mountNameOrId);\r\n    if (mount) {\r\n        if (MountManager.isaMount(mount.id)) {\r\n            MountManager.doRemoveMount(findTokenById(mount.getFlag(FlagScope, Flags.Rider)), mount);\r\n        } else { error(`Token '${mount.name}' is not a mount`); }\r\n    } else { error(`A token could not be found with the name or id : ${mountNameOrId}`); }\r\n}","import { MountManager } from \"./mountManager.js\";\r\nimport { Settings } from \"./settings.js\";\r\nimport { findTokenById, Flags, FlagScope } from \"./utils.js\";\r\n\r\n/**\r\n * Functinality class for managing the token HUD\r\n */\r\nexport class MountHud {\r\n\r\n    /**\r\n     * Called when a token is right clicked on to display the HUD.\r\n     * Adds a button with a horse icon, and adds a slash on top of it if it is already a mount.\r\n     * @param {Object} app - the application data\r\n     * @param {Object} html - the html data\r\n     * @param {Object} hudToken - The HUD Data\r\n     */\r\n    static async renderMountHud(app, html, hudToken) {\r\n\r\n        let mount = canvas.tokens.controlled.find(t => t.id == hudToken._id);\r\n\r\n        // if only one token is selected\r\n        if (canvas.tokens.controlled.length == 1) {\r\n            // if the selected token is a mount\r\n            if (MountManager.isaMount(canvas.tokens.controlled[0].id)) {\r\n                this.addRemoveRidersButton(html, hudToken);\r\n            }\r\n            if (MountManager.isaRider(canvas.tokens.controlled[0].id)) {\r\n                this.addDismountButton(html, hudToken);\r\n            }\r\n        } else {\r\n            this.addMountButton(html, hudToken);\r\n        }\r\n\r\n        // if (canvas.tokens.controlled.length == 1 && MountManager.isaMount(mount.id)) {\r\n        //     this.addButton(html, hudToken, true);\r\n        // } else if (canvas.tokens.controlled.length >= 2) {\r\n        //     this.addMountButton(html, hudToken);\r\n        //     // let rider = canvas.tokens.controlled.find(t => t.id != mount.id);\r\n\r\n        //     // if (MountManager.isRidersMount(rider.id, mount.id)) {\r\n        //     //     this.addButton(html, data, true);\r\n        //     // }\r\n        //     // else {\r\n        //     //     // if (!MountManager.isaMount(mount.id)) {\r\n        //     //     if (!MountManager.isAncestor(mount.id, rider.id)) {\r\n        //     //         this.addButton(html, data);\r\n        //     //     }\r\n        //     //     // }\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n    static addMountButton(html, hudToken) {\r\n\r\n        let tokenNames = canvas.tokens.controlled.filter(token => token.id != hudToken._id).map(token => { return `'${token.name}'`; });\r\n\r\n        const button = this.buildButton(html, `Mount ${tokenNames.join(', ').replace(/, ([^,]*)$/, ' and $1')} on to ${hudToken.name}`);\r\n\r\n        button.find('i').click(async (ev) => {\r\n            MountManager.mountUp(hudToken);\r\n        });\r\n    }\r\n\r\n    static addDismountButton(html, hudToken) {\r\n        const rider = findTokenById(hudToken._id);\r\n        let button = this.buildButton(html, `Dismount ${hudToken.name} from ${findTokenById(rider.getFlag(FlagScope, Flags.Mount)).name}`);\r\n        button = this.addSlash(button);\r\n\r\n        button.find('i').click(async (ev) => {\r\n            MountManager.dismount(hudToken);\r\n        });\r\n    }\r\n\r\n    static addRemoveRidersButton(html, hudToken) {\r\n        let button = this.buildButton(html, `Remove all riders from ${hudToken.name}`);\r\n        button = this.addSlash(button);\r\n\r\n        button.find('i').click(async (ev) => {\r\n            MountManager.removeAllRiders(hudToken);\r\n        });\r\n    }\r\n\r\n    static buildButton(html, tooltip) {\r\n        let button = $(`<div class=\"control-icon mount-up\" title=\"${tooltip}\"><i class=\"fas ${Settings.getIconClass()}\"></i></div>`);\r\n        let col = html.find(Settings.getHudColumnClass());\r\n        if (Settings.getHudTopBottomClass() == 'top') {\r\n            col.prepend(button);\r\n        } else {\r\n            col.append(button);\r\n        }\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds the mount button to the HUD HTML\r\n     * @param {object} html - The HTML\r\n     * @param {object} data - The data\r\n     * @param {boolean} hasSlash - If true, the slash will be placed over the mount icon\r\n     */\r\n    static async addButton(html, data, hasSlash = false) {\r\n        let button = $(`<div class=\"control-icon mount-up\"><i class=\"fas ${Settings.getIconClass()}\"></i></div>`);\r\n\r\n        if (hasSlash) {\r\n            this.addSlash(button);\r\n        }\r\n\r\n        let col = html.find(Settings.getHudColumnClass());\r\n        if (Settings.getHudTopBottomClass() == 'top') {\r\n            col.prepend(button);\r\n        } else {\r\n            col.append(button);\r\n        }\r\n\r\n        button.find('i').click(async (ev) => {\r\n            if (MountManager.mountUp(data)) {\r\n                if (hasSlash) {\r\n                    this.removeSlash(button);\r\n                } else {\r\n                    this.addSlash(button);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a slash icon on top of the horse icon to signify \"dismount\"\r\n     * @param {Object} button - The HUD button to add a slash on top of\r\n     */\r\n    static addSlash(button) {\r\n        let slash = $(`<i class=\"fas fa-slash\" style=\"position: absolute; color: tomato\"></i>`);\r\n        button.addClass(\"fa-stack\");\r\n        button.find('i').addClass('fa-stack-1x');\r\n        slash.addClass('fa-stack-1x');\r\n        button.append(slash);\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Removes the slash icon from the button to signify that it is no longer a mount\r\n     * @param {Object} button - The mount up button\r\n     */\r\n    static removeSlash(button) {\r\n        let slash = button.find('i')[1];\r\n        slash.remove();\r\n    }\r\n}\r\n\r\n","import { Chatter } from \"./chatter.js\";\r\nimport { Settings } from \"./settings.js\";\r\nimport { error, findTokenById, Flags, FlagScope, riderLock, riderX, riderY, socketAction, socketName, warn } from \"./utils.js\";\r\n\r\n/**\r\n * Provides all of the functionality for interacting with the game (tokens, canvas, etc.)\r\n */\r\nexport class MountManager {\r\n\r\n    /**\r\n     * Called when the mount up button was clicked on a token's HUD\r\n     * Determines if conditions are appropriate for mounting, and executes the mount if so\r\n     * @param {Object} hudToken - The token from which the button was clicked on the hud\r\n     */\r\n    static async mountUp(hudToken) {\r\n        const mountToken = canvas.tokens.controlled.find(t => t.id == hudToken._id);\r\n\r\n        for (const riderToken of canvas.tokens.controlled) {\r\n            if (riderToken.id != mountToken.id) {\r\n                // check that the new rider isn't already a rider of a different mount\r\n                if (this.isaRider(riderToken.id) && !this.isRidersMount(riderToken.id, hudToken._id)) {\r\n                    warn(`Couldn't mount '${riderToken.name}' on to '${hudToken.name}' because \\\r\n                        it is already mounted to '${findTokenById(riderToken.getFlag(FlagScope, Flags.Mount)).name}'.`);\r\n                    continue;\r\n                }\r\n                if (this.isAncestor(mountToken.id, riderToken.id)) {\r\n                    continue;\r\n                }\r\n                let riders = mountToken.getFlag(FlagScope, Flags.Riders);\r\n                if (riders == undefined) riders = [];\r\n                if (!riders.includes(riderToken.id)) { riders.push(riderToken.id); }\r\n                await mountToken.unsetFlag(FlagScope, Flags.Riders);\r\n                await mountToken.setFlag(FlagScope, Flags.Riders, riders);\r\n                await riderToken.setFlag(FlagScope, Flags.Mount, mountToken.id);\r\n                await riderToken.setFlag(FlagScope, Flags.OrigSize, { w: riderToken.w, h: riderToken.h });\r\n\r\n                Chatter.mountMessage(riderToken.id, mountToken.id);\r\n\r\n                // shrink the rider if needed\r\n                if (riderToken.w >= mountToken.w || riderToken.h >= mountToken.h) {\r\n                    let grid = canvas.scene.data.grid;\r\n                    let newWidth = (mountToken.w / 2) / grid;\r\n                    let newHeight = (mountToken.h / 2) / grid;\r\n                    await riderToken.update({\r\n                        width: newWidth,\r\n                        height: newHeight,\r\n                    });\r\n                    riderToken.zIndex = mountToken.zIndex + 10;\r\n                }\r\n\r\n                let loc = this.getRiderInitialLocation(riderToken, mountToken);\r\n                await riderToken.setFlag(FlagScope, Flags.MountMove, true);\r\n                await riderToken.update({\r\n                    x: loc.x,\r\n                    y: loc.y\r\n                });\r\n                riderToken.zIndex = mountToken.zIndex + 10;\r\n            }\r\n        }\r\n\r\n        mountToken.parent.sortChildren();\r\n    }\r\n\r\n    static async dismount(hudToken) {\r\n        const riderToken = findTokenById(hudToken._id);\r\n        const mountToken = findTokenById(riderToken.getFlag(FlagScope, Flags.Mount));\r\n        this.doRemoveMount(riderToken, mountToken);\r\n    }\r\n\r\n    static async removeAllRiders(hudToken) {\r\n        const mountToken = findTokenById(hudToken._id);\r\n\r\n        for (const riderId of mountToken.getFlag(FlagScope, Flags.Riders)) {\r\n            const riderToken = findTokenById(riderId);\r\n            this.doRemoveMount(riderToken, mountToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a link between the rider and mount and moves the rider onto the mount\r\n     * @param {object} riderToken - The rider token\r\n     * @param {object} mountToken - The mount token\r\n     */\r\n    static async doCreateMount(riderToken, mountToken) {\r\n        let riders = mountToken.getFlag(FlagScope, Flags.Riders);\r\n        if (riders == undefined) riders = [];\r\n        if (!riders.includes(riderToken.id)) { riders.push(riderToken.id); }\r\n        // await mountToken.setFlag(FlagScope, Flags.Riders, riders);\r\n        console.log(riders);\r\n        await mountToken.update({ flags: { mountup: { riders: riders } } });\r\n        await riderToken.setFlag(FlagScope, Flags.Mount, mountToken.id);\r\n        await riderToken.setFlag(FlagScope, Flags.OrigSize, { w: riderToken.w, h: riderToken.h });\r\n\r\n        this.moveRiderToMount(riderToken, { x: mountToken.x, y: mountToken.y });\r\n        Chatter.mountMessage(riderToken.id, mountToken.id);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes a link between the rider and mount and restores the rider's size if necessary\r\n     * @param {object} riderToken - The rider token\r\n     * @param {object} mountToken - The mount token\r\n     */\r\n    static async doRemoveMount(riderToken, mountToken) {\r\n        await riderToken.setFlag(FlagScope, Flags.MountMove, true);\r\n        this.restoreRiderSize(riderToken);\r\n        Chatter.dismountMessage(riderToken.id, mountToken.id);\r\n        const riders = mountToken.getFlag(FlagScope, Flags.Riders);\r\n        await mountToken.unsetFlag(FlagScope, Flags.Riders);\r\n        riders.splice(riders.indexOf(riderToken.id));\r\n        await mountToken.setFlag(FlagScope, Flags.Riders, riders);\r\n        await riderToken.unsetFlag(FlagScope, Flags.Mount);\r\n        await riderToken.unsetFlag(FlagScope, Flags.OrigSize);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Restores the size of a mount's rider token to original size\r\n     * @param {String} riderToken - The rider token who's size needs to be restored\r\n     */\r\n    static async restoreRiderSize(riderToken) {\r\n        // let mount = findTokenById(riderToken);\r\n        // let rider = findTokenById(mount.getFlag(FlagScope, Flags.Riders));\r\n        let origsize = riderToken.getFlag(FlagScope, Flags.OrigSize);\r\n\r\n        if (riderToken.w < origsize.w || riderToken.h < origsize.h) {\r\n            let grid = canvas.scene.data.grid;\r\n            let newWidth = riderToken.w < origsize.w ? origsize.w : riderToken.w;\r\n            let newHeight = riderToken.h < origsize.h ? origsize.h : riderToken.H;\r\n\r\n            await riderToken.update({\r\n                width: newWidth / grid,\r\n                height: newHeight / grid\r\n            });\r\n        }\r\n\r\n        riderToken.parent.sortChildren();\r\n    }\r\n\r\n    /**\r\n     * Called when a token is deleted, checks if the token is part of any ride link, and breaks said link\r\n     * @param {Object} token - The token being deleted\r\n     */\r\n    static async handleTokenDelete(tokenId) {\r\n        let token = findTokenById(tokenId);\r\n\r\n        if (this.isaRider(token.id)) {\r\n            let mount = findTokenById(token.getFlag(FlagScope, Flags.Mount));\r\n            await mount.unsetFlag(FlagScope, Flags.Riders);\r\n        }\r\n\r\n        if (this.isaMount(token.id)) {\r\n            let rider = findTokenById(token.getFlag(FlagScope, Flags.Riders));\r\n            await rider.unsetFlag(FlagScope, Flags.Mount);\r\n            await rider.unsetFlag(FlagScope, Flags.OrigSize);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Pops all rider tokens on top of their mount tokens (canvas wide)\r\n     */\r\n    static popAllRiders() {\r\n        canvas.tokens.placeables.forEach((token) => {\r\n            if (this.isaMount(token.id) && !this.isaRider(token.id)) {\r\n                this.popRider(token.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Recursively pops a mount's riders on the z-index\r\n     * @param {string} mountId - The ID of the mount token\r\n     */\r\n    static async popRider(mountId, callcount = 0) {\r\n\r\n        if (callcount > 100) {\r\n            error('Pop riders called too many times. Breaking all rides for safety.');\r\n            canvas.tokens.placeables.forEach(t => { t.unsetFlag('mountup', 'riders'); t.unsetFlag('mountup', 'mount'); });\r\n            return true;\r\n        }\r\n        let mountToken = findTokenById(mountId);\r\n\r\n        for (const riderId of mountToken.getFlag(FlagScope, Flags.Riders)) {\r\n            const riderToken = findTokenById(riderId);\r\n            if (riderToken) {\r\n                riderToken.zIndex = mountToken.zIndex + 10;\r\n            }\r\n\r\n            if (this.isaMount(riderToken.id)) {\r\n                this.popRider(riderToken.id, callcount += 1);\r\n            }\r\n\r\n            if (riderToken.owner) {\r\n                await riderToken.unsetFlag(FlagScope, Flags.MountMove);\r\n            }\r\n        }\r\n\r\n        mountToken.parent.sortChildren();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Called when a token is moved in the game.\r\n     * Determines if the token being moved is a mount - if it is, moves the rider to match\r\n     * @param {String} tokenId - The ID of the token being moved\r\n     * @param {Object} updateData - Update data being sent by the game\r\n     */\r\n    static async doTokenUpdate(tokenId, updateData) {\r\n        if (this.isaRider(tokenId)) {\r\n            const riderToken = findTokenById(tokenId);\r\n            const mountToken = findTokenById(riderToken.getFlag(FlagScope, Flags.Mount));\r\n            const newLocation = {\r\n                x: updateData.x !== undefined ? updateData.x : riderToken.x,\r\n                y: updateData.y !== undefined ? updateData.y : riderToken.y\r\n            };\r\n\r\n            if (!riderToken.getFlag(FlagScope, Flags.MountMove)) {\r\n                switch (Settings.getRiderLock()) {\r\n                    case riderLock.NoLock:\r\n                        break;\r\n                    case riderLock.LockLocation:\r\n                        delete updateData.x;\r\n                        delete updateData.y;\r\n                        warn(`${riderToken.name} is currently locked to a mount`);\r\n                        break;\r\n                    case riderLock.LockBounds:\r\n                        if (!this.isInsideTokenBounds(newLocation, mountToken)) {\r\n                            delete updateData.x;\r\n                            delete updateData.y;\r\n                            warn(`${riderToken.name} is currently locked inside a mount`);\r\n                        }\r\n                        break;\r\n                    case riderLock.Dismount:\r\n                        if (!this.isInsideTokenBounds(newLocation, mountToken)) {\r\n                            this.doRemoveMount(riderToken, mountToken);\r\n                        }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.isaMount(tokenId)) {\r\n            const mountToken = findTokenById(tokenId);\r\n\r\n            updateData.x = updateData.x !== undefined ? updateData.x : mountToken.x;\r\n            updateData.y = updateData.y !== undefined ? updateData.y : mountToken.y;\r\n            updateData.rotation = updateData.rotation !== undefined ? updateData.rotation : mountToken.data.rotation;\r\n\r\n            const mountLocation = { x: mountToken.x, y: mountToken.y };\r\n\r\n            for (const riderId of mountToken.getFlag(FlagScope, Flags.Riders)) {\r\n                const riderToken = findTokenById(riderId);\r\n                if (riderToken.owner) {\r\n                    await this.moveRiderToMount(riderToken, mountLocation, updateData.x, updateData.y, updateData.rotation || mountToken.data.rotation);\r\n                } else {\r\n                    const offset = { x: mountLocation.x - riderToken.x, y: mountLocation.y - riderToken.y };\r\n                    const rotation = Settings.getRiderRotate() ? updateData.rotation : riderToken.data.rotation;\r\n                    game.socket.emit(socketName, {\r\n                        mode: socketAction.UpdateToken,\r\n                        riderId: riderToken.id,\r\n                        // updateData: updateData\r\n                        // mountId: mountToken.id,\r\n                        x: updateData.x - offset.x,\r\n                        y: updateData.y - offset.y,\r\n                        rotation: rotation\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    static isInsideTokenBounds(location, token) {\r\n        const x = token.x + token.w;\r\n        const y = token.y + token.h;\r\n\r\n        return location.x >= token.x &&\r\n            location.x < (token.x + token.w) &&\r\n            location.y >= token.y &&\r\n            location.y < (token.y + token.h);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the token is currently serving as a mount in any existing ride link\r\n     * @param {String} tokenId - The ID of the token to evaluate\r\n     */\r\n    static isaMount(tokenId) {\r\n        let token = findTokenById(tokenId);\r\n        if (token) {\r\n            return token.getFlag(FlagScope, Flags.Riders) != undefined && token.getFlag(FlagScope, Flags.Riders).length > 0;\r\n        } else return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the token is currenty serving as a rider in any existing ride link\r\n     * @param {String} tokenId - The ID of the token to evaluate\r\n     */\r\n    static isaRider(tokenId) {\r\n        let token = findTokenById(tokenId);\r\n        if (token) {\r\n            return token.getFlag('mountup', 'mount') != undefined;\r\n        } else return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the specified mount belongs to the specified rider\r\n     * @param {string} riderId - The rider token's ID\r\n     * @param {string} mountId - The mount token's ID\r\n     */\r\n    static isRidersMount(riderId, mountId) {\r\n        let rider = findTokenById(riderId);\r\n        let mount = findTokenById(mountId);\r\n        return (rider.getFlag(FlagScope, Flags.Mount) == mount.id);\r\n    }\r\n\r\n    /**\r\n     * Moves the Rider token to Mount token.\r\n     * If both tokens are being moved together, newX and newY must be provided, or rider \r\n     *  will end up at the Mount's starting location\r\n     * @param {Object} riderToken - The rider\r\n     * @param {Object} mountLocation - The mount\r\n     * @param {Number} newX - (optional) The new X-coordinate for the move\r\n     * @param {Number} newY - (optional) The new Y-coordinate for the move\r\n     */\r\n    static async moveRiderToMount(riderToken, mountLocation, newX, newY, newRot) {\r\n\r\n        riderToken = findTokenById(riderToken.id);\r\n\r\n        await riderToken.setFlag(FlagScope, Flags.MountMove, true);\r\n\r\n        const offset = { x: mountLocation.x - riderToken.x, y: mountLocation.y - riderToken.y };\r\n\r\n        if (Settings.getRiderRotate()) {\r\n            newRot = newRot !== undefined ? newRot : riderToken.rotation;\r\n        } else {\r\n            newRot = riderToken.rotation;\r\n        }\r\n\r\n        await riderToken.update({\r\n            x: newX === undefined ? mountLocation.x - offset.x : newX - offset.x,\r\n            y: newY === undefined ? mountLocation.y - offset.y : newY - offset.y,\r\n            rotation: newRot\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the correct rider placement coordinates based on the mount's position and movement\r\n     * @param {token} riderToken - The rider token\r\n     * @param {token} mountToken - The mount token\r\n     */\r\n    static getRiderInitialLocation(riderToken, mountToken) {\r\n        let loc = { x: mountToken.x, y: mountToken.y };\r\n\r\n        switch (Settings.getRiderX()) {\r\n            case riderX.Center:\r\n                let mountCenter = mountToken.getCenter(mountToken.x, mountToken.y);\r\n                loc.x = mountCenter.x - (riderToken.w / 2);\r\n                break;\r\n            case riderX.Right:\r\n                loc.x = mountToken.x + mountToken.w - riderToken.w;\r\n                break;\r\n        }\r\n\r\n        switch (Settings.getRiderY()) {\r\n            case riderY.Center:\r\n                let mountCenter = mountToken.getCenter(mountToken.x, mountToken.y);\r\n                loc.y = mountCenter.y - (riderToken.h / 2);\r\n                break;\r\n            case riderY.Bottom:\r\n                loc.y = mountToken.y + mountToken.h - riderToken.h;\r\n                break;\r\n        }\r\n        return loc;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tokens are related via a long mount chain\r\n     * @param {string} childId - The ID of the child\r\n     * @param {string} ancestorId - The ID of the ancestor\r\n     */\r\n    static isAncestor(childId, ancestorId) {\r\n        if (this.isaRider(childId)) {\r\n            let child = findTokenById(childId);\r\n            let parent = findTokenById(child.getFlag(FlagScope, Flags.Mount));\r\n            if (parent.id == ancestorId) return true;\r\n            return this.isAncestor(parent.id, ancestorId);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n","import { dismount, dropRider, mount } from './macros.js';\r\nimport { MountHud } from \"./mountHud.js\";\r\nimport { MountManager } from \"./mountManager.js\";\r\nimport { Settings } from \"./settings.js\";\r\nimport { findTokenById, socketAction, socketName } from \"./utils.js\";\r\n\r\nHooks.on('ready', () => {\r\n    Settings.registerSettings();\r\n\r\n    game.socket.on(socketName, data => {\r\n        if (game.user.isGM) {\r\n            switch (data.mode) {\r\n                case socketAction.UpdateToken:\r\n                    findTokenById(data.riderId).update({\r\n                        x: data.x,\r\n                        y: data.y,\r\n                        rotation: data.rotation\r\n                    });\r\n            }\r\n        }\r\n    });\r\n\r\n    window.MountUp = {\r\n        mount: mount,\r\n        dismount: dismount,\r\n        dropRider: dropRider\r\n    };\r\n});\r\n\r\nHooks.on('canvasReady', () => {\r\n    MountManager.popAllRiders();\r\n\r\n\r\n});\r\n\r\nHooks.on('renderTokenHUD', (app, html, data) => {\r\n    MountHud.renderMountHud(app, html, data);\r\n});\r\n\r\nHooks.on('preUpdateToken', async (scene, token, updateData) => {\r\n    if (updateData.hasOwnProperty(\"x\") || updateData.hasOwnProperty(\"y\") || updateData.hasOwnProperty(\"rotation\")) {\r\n        //await findTokenById(token._id).setFlag(FlagScope, Flags.MountMove, true);\r\n        await MountManager.doTokenUpdate(token._id, updateData);\r\n    }\r\n});\r\n\r\nHooks.on('updateToken', async (scene, token, updateData) => {\r\n    if (MountManager.isaMount(updateData._id)) {\r\n        MountManager.popRider(updateData._id);\r\n    }\r\n});\r\n\r\nHooks.on('controlToken', async (token) => {\r\n    if (MountManager.isaMount(token.id)) {\r\n        await MountManager.popRider(token.id);\r\n    }\r\n});\r\n\r\nHooks.on('preDeleteToken', async (scene, token) => {\r\n    await MountManager.handleTokenDelete(token._id);\r\n    return true;\r\n});","import { SettingsForm } from './settingsForm.js';\r\n\r\nexport const modName = 'Mount Up';\r\nconst mod = 'mountup';\r\n\r\n\r\nexport const iconOptions = [\r\n    'Horse',\r\n    'People Carrying',\r\n    'Hands',\r\n    'Open Hand',\r\n    'Fist',\r\n    'Handshake'\r\n];\r\nexport const hudColumns = ['Left', 'Right'];\r\nexport const hudTopBottom = ['Top', 'Bottom'];\r\nexport const riderXOptions = ['Left', 'Center', 'Right'];\r\nexport const riderYOptions = ['Top', 'Center', 'Bottom'];\r\nexport const riderLockOptions = [\r\n    'mu.settings.riderLock.noLock',\r\n    'Lock to location',\r\n    'Lock to mount bounds',\r\n    'Dismount when outside mount bounds'\r\n];\r\n\r\n/**\r\n * Provides functionality for interaction with module settings\r\n */\r\nexport class Settings {\r\n\r\n    //#region getters and setters\r\n    static getIcon() {\r\n        return game.settings.get(mod, 'icon');\r\n    }\r\n\r\n    static setIcon(val) {\r\n        game.settings.set(mod, 'icon', val);\r\n    }\r\n\r\n    static getHudColumn() {\r\n        return game.settings.get(mod, 'column');\r\n    }\r\n    static setHudColumn(val) {\r\n        game.settings.set(mod, 'column', val);\r\n    }\r\n\r\n    static getHudTopBottom() {\r\n        return game.settings.get(mod, 'topbottom');\r\n    }\r\n\r\n    static setHudTopBottom(val) {\r\n        game.settings.set(mod, 'topbottom', val);\r\n    }\r\n\r\n    /**\r\n     * Returns the user specified rider horizontal location\r\n     */\r\n    static getRiderX() {\r\n        return game.settings.get(mod, 'rider-x');\r\n    }\r\n\r\n\r\n    static setRiderX(val) {\r\n        game.settings.set(mod, 'rider-x', val);\r\n    }\r\n\r\n    /**\r\n     * Returns the user specified rider vertical location\r\n     */\r\n    static getRiderY() {\r\n        return game.settings.get(mod, 'rider-y');\r\n    }\r\n\r\n    static setRiderY(val) {\r\n        game.settings.set(mod, 'rider-y', val);\r\n    }\r\n\r\n    /**\r\n    * Returns true if chat messages should be sent\r\n    */\r\n    static getShouldChat() {\r\n        return game.settings.get(mod, 'should-chat');\r\n    }\r\n\r\n    static setShouldChat(val) {\r\n        game.settings.set(mod, 'should-chat', val);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the setting to lock riders is enabled\r\n     */\r\n    static getRiderLock() {\r\n        return game.settings.get(mod, 'lock-riders');\r\n    }\r\n\r\n    static setRiderLock(val) {\r\n        game.settings.set(mod, 'lock-riders', val);\r\n    }\r\n\r\n    static getRiderRotate() {\r\n        return game.settings.get(mod, 'rider-rotate');\r\n    }\r\n\r\n    static setRiderRotate(val) {\r\n        game.settings.set(mod, 'rider-rotate', val);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Returns the user specified mounting message\r\n     */\r\n    static getMountMessage() {\r\n        return game.settings.get(mod, 'mount-message');\r\n    }\r\n\r\n    static setMountMessage(val) {\r\n        game.settings.set(mod, 'mount-message', val);\r\n    }\r\n\r\n    /**\r\n     * Returns the user specified dismounting message\r\n     */\r\n    static getDismountMessage() {\r\n        return game.settings.get(mod, 'dismount-message');\r\n    }\r\n\r\n    static setDismountMessage(val) {\r\n        game.settings.set(mod, 'dismount-message', val);\r\n    }\r\n    //#endregion\r\n\r\n    //#region CSS Getters\r\n    /**\r\n    * Returns the css class for the left or right HUD column based on the game setting\r\n    */\r\n    static getHudColumnClass() {\r\n        return game.settings.get(mod, 'column') == 0 ? '.col.left' : '.col.right';\r\n    }\r\n\r\n    /**\r\n     * Returns whether the button should be placed on the top or bottom of the HUD column\r\n     */\r\n    static getHudTopBottomClass() {\r\n        return game.settings.get(mod, 'topbottom') == 0 ? 'top' : 'bottom';\r\n    }\r\n\r\n    /**\r\n     * Gets the icon that should be used on the HUD\r\n     */\r\n    static getIconClass() {\r\n        switch (game.settings.get(mod, 'icon')) {\r\n            case 0: return 'fa-horse';\r\n            case 1: return 'fa-people-carry';\r\n            case 2: return 'fa-hands';\r\n            case 3: return 'fa-hand-holding';\r\n            case 4: return 'fa-fist-raised';\r\n            case 5: return 'fa-handshake';\r\n        }\r\n    }\r\n    //#endregion CSS Getters\r\n\r\n    /**\r\n     * Registers all of the necessary game settings for the module\r\n     */\r\n    static registerSettings() {\r\n\r\n        game.settings.registerMenu(mod, 'settingsMenu', {\r\n            name: 'mu.settings.button.name',\r\n            label: 'mu.settings.button.label',\r\n            icon: 'fas fa-horse',\r\n            type: SettingsForm,\r\n            restricted: true\r\n        });\r\n\r\n        /** Which Icon should be used */\r\n        game.settings.register(mod, 'icon', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: Number,\r\n            default: 0,\r\n            choices: iconOptions\r\n        });\r\n\r\n        /** Which column should the button be placed on */\r\n        game.settings.register(mod, 'column', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: Number,\r\n            default: 0,\r\n            choices: hudColumns\r\n        });\r\n\r\n        /** Whether the button should be placed on the top or bottom of the column */\r\n        game.settings.register(mod, 'topbottom', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: Number,\r\n            default: 0,\r\n            choices: hudTopBottom\r\n        });\r\n\r\n        /** Whether or not riders should be locked to mounts */\r\n        game.settings.register(mod, 'lock-riders', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: Number,\r\n            default: 3,\r\n            choices: riderLockOptions\r\n        });\r\n\r\n        game.settings.register(mod, 'rider-rotate', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: Boolean,\r\n            defualt: false\r\n        });\r\n\r\n        /** Where to place the rider horizontally on the mount */\r\n        game.settings.register(mod, 'rider-x', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: Number,\r\n            defualt: 1,\r\n            choices: riderXOptions\r\n        });\r\n\r\n        /** Where to place the rider vertically on the mount */\r\n        game.settings.register(mod, 'rider-y', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: Number,\r\n            defualt: 0,\r\n            choices: riderYOptions\r\n        });\r\n\r\n        /** Whether or not chat messages should be sent */\r\n        game.settings.register(mod, 'should-chat', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: Boolean,\r\n            default: true\r\n        });\r\n\r\n        /** The mounting message */\r\n        game.settings.register(mod, 'mount-message', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: String,\r\n            default: '{rider} has mounted {mount}.'\r\n        });\r\n\r\n        /** The dismounting message */\r\n        game.settings.register(mod, 'dismount-message', {\r\n            scope: 'world',\r\n            config: false,\r\n            type: String,\r\n            default: '{rider} has dismounted from {mount}.'\r\n        });\r\n    }\r\n}\r\n","import { hudColumns, hudTopBottom, iconOptions, riderLockOptions, riderXOptions, riderYOptions, Settings } from './settings.js';\r\n\r\nexport class SettingsForm extends FormApplication {\r\n\r\n    constructor(object, options = {}) {\r\n        super(object, options);\r\n    }\r\n\r\n    /**\r\n    * Default Options for this FormApplication\r\n    */\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            id: \"mountup-settings-form\",\r\n            title: \"Mount Up! - Settings\",\r\n            template: \"./modules/mountup/templates/settings.html\",\r\n            classes: [\"sheet\"],\r\n            width: 500,\r\n            closeOnSubmit: true\r\n        });\r\n    }\r\n\r\n    getData() {\r\n        const data = {\r\n            icons: this.getSelectList(iconOptions, Settings.getIcon()),\r\n            hudColumn: this.getSelectList(hudColumns, Settings.getHudColumn()),\r\n            hudTopBottom: this.getSelectList(hudTopBottom, Settings.getHudTopBottom()),\r\n            riderLock: this.getSelectList(riderLockOptions, Settings.getRiderLock()),\r\n            riderRotate: Settings.getRiderRotate(),\r\n            riderX: this.getSelectList(riderXOptions, Settings.getRiderX()),\r\n            riderY: this.getSelectList(riderYOptions, Settings.getRiderY()),\r\n            shouldChat: Settings.getShouldChat(),\r\n            mountMsg: Settings.getMountMessage(),\r\n            dismountMsg: Settings.getDismountMessage()\r\n        };\r\n\r\n        return data;\r\n    }\r\n\r\n    /** \r\n     * Executes on form submission.\r\n     * @param {Object} e - the form submission event\r\n     * @param {Object} d - the form data\r\n     */\r\n    async _updateObject(e, d) {\r\n        Settings.setIcon(d.icon);\r\n        Settings.setHudColumn(d.hudColumn);\r\n        Settings.setHudTopBottom(d.hudTopBottom);\r\n        Settings.setRiderLock(d.riderLock);\r\n        Settings.setRiderRotate(d.riderRotate);\r\n        Settings.setRiderX(d.riderX);\r\n        Settings.setRiderY(d.riderY);\r\n        Settings.setShouldChat(d.shouldChat);\r\n        Settings.setMountMessage(d.mountMsg);\r\n        Settings.setDismountMessage(d.dismountMsg);\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n    }\r\n\r\n    getSelectList(array, selected) {\r\n        let options = [];\r\n        array.forEach((x, i) => {\r\n            options.push({ value: x, selected: i == selected });\r\n        });\r\n        return options;\r\n    }\r\n}","import { modName } from \"./settings.js\";\r\n\r\n/**\r\n * Flag Info\r\n */\r\nexport const FlagScope = 'mountup';\r\nexport const Flags = {\r\n    Mount: 'mount',\r\n    Riders: 'riders',\r\n    OrigSize: 'origsize',\r\n    MountMove: 'mountMove'\r\n};\r\n\r\n/**\r\n * Socket Info\r\n */\r\nexport const socketName = 'module.mountup';\r\nexport const socketAction = {\r\n    Mount: 0,\r\n    Dismount: 1,\r\n    UpdateToken: 2\r\n};\r\n\r\n/**\r\n * Rider horizontal placement\r\n */\r\nexport const riderX = {\r\n    Left: 0,\r\n    Center: 1,\r\n    Right: 2\r\n};\r\n\r\n/**\r\n * Rider vertical placement\r\n */\r\nexport const riderY = {\r\n    Top: 0,\r\n    Center: 1,\r\n    Bottom: 2\r\n};\r\n\r\nexport const riderLock = {\r\n    NoLock: 0,\r\n    LockLocation: 1,\r\n    LockBounds: 2,\r\n    Dismount: 3\r\n};\r\n\r\n/**\r\n * Returns the ID of the first GM logged in\r\n */\r\nexport function firstGM() {\r\n    for (let user of game.users.entities) {\r\n        if (user.data.role >= 4 && user.active) {\r\n            return user.data._id;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Logs messages to the console\r\n * @param {String} message The message to be logged to the console\r\n * @param {Boolean} force If True, force the message to the console, regardless of debug mode\r\n */\r\nexport function logMessage(message, force = false) {\r\n    if (game.settings.get(\"mountup\", \"debug\") || force) {\r\n        console.log(`${modName} | ${message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Pops a \"toast\" notification in the warn style containing the provided message\r\n * @param {String} message - The message to be displayed\r\n */\r\nexport function warn(message) {\r\n    ui.notifications.warn(`Mount Up! : ${message}`);\r\n}\r\n\r\n/**\r\n * Pops a \"toast\" notification in the error style containing the provided message\r\n * @param {String} message - The message to be displayed\r\n */\r\nexport function error(message) {\r\n    ui.notifications.error(`Mount Up! : ${message}`);\r\n    console.log(`Mount Up! : ${message}`);\r\n}\r\n\r\n/**\r\n * Pops a \"toast\" notification in the info style containing the provided message\r\n * @param {String} message - The message to be displayed\r\n */\r\nexport function info(message) {\r\n    ui.notifications.info(`Mount Up! : ${message}`);\r\n}\r\n\r\n/**\r\n * Returns the first token object from the canvas based on the ID value\r\n * @param {String} tokenId - The ID of the token to look for\r\n */\r\nexport function findTokenById(tokenId) {\r\n    return canvas.tokens.placeables.find(t => t.id == tokenId);\r\n}\r\n\r\n/**\r\n * Returns the first token object from the canvas based on the name value (uses a lowercase search)\r\n * @param {String} tokenName - The name of the token to look for\r\n */\r\nexport function findTokenByName(tokenName) {\r\n    return canvas.tokens.placeables.find(t => t.name.toLowerCase() == tokenName.toLowerCase());\r\n}"],"sourceRoot":""}